
#TODO: Allow for arbitrary sizes
class Int
  value:_builtins.Int64

  def new(v:_builtins.Int64)
    value = v
  end

  def self + other:Int
    return Int(_builtins.intAdd(value, other.value))
  end

  def self - other:Int
    return Int(_builtins.intSub(value, other.value))
  end

  def self * other:Int
    return Int(_builtins.intMul(value, other.value))
  end

  def self // other:Int
    return Int(_builtins.intDiv(value, other.value))
  end
end

#TODO: Allow for arbitrary sizes
class Real
  value:_builtins.Float64

  def new(v:_builtins.Float64)
    value = v
  end

  def self + other:Real
    return Real(_builtins.floatAdd(value, other.value))
  end

  def self - other:Real
    return Real(_builtins.floatSub(value, other.value))
  end

  def self * other:Real
    return Real(_builtins.floatMul(value, other.value))
  end

  def self / other:Real
    return Real(_builtins.floatDiv(value, other.value))
  end
end

#TODO: Implement using byte arrays
class String
  value:_builtins.String

  def new(v:_builtins.String)
    value = v
  end
end

#TODO: Implement properly once casting is in place
def puts(value:Int)
  _builtins.puts(value.value)
end

def puts(value:String)
  _builtins.puts(value.value)
end

def puts(value:Real)
  _builtins.puts(value.value)
end
