
#TODO: Allow for arbitrary sizes
class Int
  value:_builtins.Int64

  new()
    value = 0.value
  end

  new(v:_builtins.Int64)
    value = v
  end

  def self + other:Int
    return Int(_builtins.intAdd(value, other.value))
  end

  def +self
    return Int(value)
  end

  def self - other:Int
    return Int(_builtins.intSub(value, other.value))
  end

  def -self
    zero = 0
    return Int(_builtins.intSub(zero.value, value))
  end

  def self * other:Int
    return Int(_builtins.intMul(value, other.value))
  end

  def self // other:Int
    return Int(_builtins.intDiv(value, other.value))
  end

  def self % other:Int
    return Int(_builtins.intRem(value, other.value))
  end

  def self == other:Int
    return Bool(_builtins.intEqual(value, other.value))
  end

  def self != other:Int
    return Bool(_builtins.intUnequal(value, other.value))
  end

  def self > other:Int
    return Bool(_builtins.intGreaterThan(value, other.value))
  end

  def self >= other:Int
    return Bool(_builtins.intGreaterOrEqualTo(value, other.value))
  end

  def self < other:Int
    return Bool(_builtins.intSmallerThan(value, other.value))
  end

  def self <= other:Int
    return Bool(_builtins.intSmallerOrEqualTo(value, other.value))
  end

  def self as Real
    return Real(_builtins.Int64ToFloat64(value))
  end
end

#TODO: Allow for arbitrary sizes
class Real
  value:_builtins.Float64

  new()
    value = 0.0.value
  end

  new(v:_builtins.Float64)
    value = v
  end

  def self + other:Real
    return Real(_builtins.floatAdd(value, other.value))
  end

  def self - other:Real
    return Real(_builtins.floatSub(value, other.value))
  end

  def -self
    zero = 0.0
    return Real(_builtins.floatSub(zero.value, value))
  end

  def self * other:Real
    return Real(_builtins.floatMul(value, other.value))
  end

  def self / other:Real
    return Real(_builtins.floatDiv(value, other.value))
  end

  def self % other:Real
    return Real(_builtins.floatRem(value, other.value))
  end

  def self as Int
    return Int(_builtins.Float64ToInt64(value))
  end
end

#TODO: Implement using byte arrays
class String
  value:_builtins.String

  new()
    value = "".value
  end

  new(v:_builtins.String)
    value = v
  end
end

#TODO: Implement properly
class Bool
  value:_builtins.Bool

  new()
    value = false.value
  end

  new(v:_builtins.Bool)
    value = v
  end

  def !self
    #TODO: Get rid of branching here
    if Bool(value)
      return false
    end
    return true
  end

  def self as String
    if Bool(value)
      return "true"
    else
      return "false"
    end
  end
end

#TODO: Implement properly once casting is in place
def puts(value:Int)
  _builtins.puts(value.value)
end

def puts(value:String)
  _builtins.puts(value.value)
end

def puts(value:Real)
  _builtins.puts(value.value)
end

def puts(value:Bool)
  puts(value as String)
end

module math
  def max(a, b)
    if a > b
      return a
    else
      return b
    end
  end
end

module memory
  pragma def Ptr(T)
    class ptr
      pointer:_builtins.Void

      new()
        pointer = _builtins.alloc(sizeOf(T).value)
      end

      new(size:Int)
        size = size * sizeOf(T)
        pointer = _builtins.alloc(size.value)
      end

      # private
      new(value:_builtins.Void, _:Int) # Extra argument to get around Void matching every type
        pointer = value
      end

      def get() -> T
        return pointer
      end

      def set(e:T)
        pointer = e
      end

      def alloc(size:Int)
        size = size * sizeOf(T)
        pointer = _builtins.alloc(size.value)
      end

      def realloc(size:Int)
        size = size * sizeOf(T)
        return ptr(_builtins.realloc(pointer, size.value), 0)
      end

      def self + other:Int
        offset = other * sizeOf(T)
        return ptr(_builtins.ptrOffset(pointer, offset.value), 0)
      end
    end

    return ptr
  end
end

pragma def Array(Element)
  class array
    length:Int
    capacity:Int
    pointer:pragma memory.Ptr(Element)

    new()
      length = 0
      capacity = 4
      pointer.alloc(capacity)
    end

    new(len:Int)
      length = len
      capacity = math.max(len, 4)
      pointer.alloc(capacity) # TODO: Replace with initialization
    end

    new(ptr, len)
      capacity = len
      length = len
      pointer = ptr
    end

    def get(index:Int) -> Element
      return (pointer + index).get()
    end

    def set(index:Int, element:Element)
      (pointer + index).set(element)
    end

    def add(element:Element)
      index = length
      lengthChange(length + 1)
      set(index, element)
    end

    def lengthChange(newLength:Int)
      length = newLength

      if length > capacity
        capacity = capacity * 2
        pointer = pointer.realloc(capacity)
      end
    end
  end

  return array
end
