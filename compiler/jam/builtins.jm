
#TODO: Allow for arbitrary sizes
class Int
  value:_builtins.Int64

  new(v:_builtins.Int64)
    value = v
  end

  def self + other:Int
    return Int(_builtins.intAdd(value, other.value))
  end

  def +self
    return Int(value)
  end

  def self - other:Int
    return Int(_builtins.intSub(value, other.value))
  end

  def -self
    zero = 0
    return Int(_builtins.intSub(zero.value, value))
  end

  def self * other:Int
    return Int(_builtins.intMul(value, other.value))
  end

  def self // other:Int
    return Int(_builtins.intDiv(value, other.value))
  end

  def self % other:Int
    return Int(_builtins.intRem(value, other.value))
  end

  def self == other:Int
    return Bool(_builtins.intEqual(value, other.value))
  end

  def self != other:Int
    return Bool(_builtins.intUnequal(value, other.value))
  end

  def self > other:Int
    return Bool(_builtins.intGreaterThan(value, other.value))
  end

  def self >= other:Int
    return Bool(_builtins.intGreaterOrEqualTo(value, other.value))
  end

  def self < other:Int
    return Bool(_builtins.intSmallerThan(value, other.value))
  end

  def self <= other:Int
    return Bool(_builtins.intSmallerOrEqualTo(value, other.value))
  end
end

#TODO: Allow for arbitrary sizes
class Real
  value:_builtins.Float64

  new(v:_builtins.Float64)
    value = v
  end

  def self + other:Real
    return Real(_builtins.floatAdd(value, other.value))
  end

  def self - other:Real
    return Real(_builtins.floatSub(value, other.value))
  end

  def -self
    zero = 0.0
    return Real(_builtins.floatSub(zero.value, value))
  end

  def self * other:Real
    return Real(_builtins.floatMul(value, other.value))
  end

  def self / other:Real
    return Real(_builtins.floatDiv(value, other.value))
  end

  def self % other:Real
    return Real(_builtins.floatRem(value, other.value))
  end
end

#TODO: Implement using byte arrays
class String
  value:_builtins.String

  new(v:_builtins.String)
    value = v
  end
end

#TODO: Implement properly
class Bool
  value:_builtins.Bool

  new(v:_builtins.Bool)
    value = v
  end

  def !self
    #TODO: Get rid of branching here
    if Bool(value)
      return false
    end
    return true
  end
end

#TODO: Implement properly once casting is in place
def puts(value:Int)
  _builtins.puts(value.value)
end

def puts(value:String)
  _builtins.puts(value.value)
end

def puts(value:Real)
  _builtins.puts(value.value)
end

def puts(value:Bool)
  if value
    puts("true")
  else
    puts("false")
  end
end
