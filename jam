#!/usr/bin/env python3

import os
import sys
import logging
import argparse
import cProfile
import readline
from io import StringIO

import compiler
from compiler import jam, lekvar, llvm

VERSION = "Jam v0.1a"

INTERACTIVE_STARTUP =        "{} interactive compiler".format(VERSION)
INTERACTIVE_PROMPT_RESTART = "----"
INTERACTIVE_PROMPT =         "{:>2}| "

common_parser = argparse.ArgumentParser(add_help=False)
common_parser.add_argument("-V", "--version",
    help="print the jam version number and terminate",
    action='version',
    version=VERSION,
)
common_parser.add_argument("-p", "--profile",
    help="run the profiler, printing profiling data after completion",
    action='store_true',
)
common_parser.add_argument("-v", "--verbose",
    help="use verbose logging. Supply multiple times to increase verbosity",
    action='count',
    default=0,
)
common_parser.add_argument("-O", metavar="X",
    dest="opt_level",
    help="optimisation level (0-3)",
    type=int,
    default=1,
)

parser = argparse.ArgumentParser(parents=[common_parser],
    prog = "jam",
    description = "Jam language tool suite",
)

subparsers = parser.add_subparsers(dest='subparser_name')

run_parser = subparsers.add_parser("run", aliases=["r"], parents=[common_parser],
    help="(default) run jam source code either interactively or from a file",
)
run_parser.add_argument("source",
    help="the source file to run. Leave out for interactive mode",
    type=argparse.FileType('r'),
    default=None,
    nargs='?',
)

compile_parser = subparsers.add_parser("compile", aliases=["c"], parents=[common_parser],
    help="compile jam source code to an executable",
)
compile_parser.add_argument("-s",
    dest="out_asm",
    help="output llvm IR instead of an executable",
    action='store_true',
    default=False,
)
compile_parser.add_argument("-o", "--output", metavar="FILE",
    help="the file to write the executable to. Leave out to let jam guess the name",
    type=argparse.FileType('wb'),
    default=None,
)
compile_parser.add_argument("source",
    help="the source file to compile. Leave out to read from stdin",
    type=argparse.FileType('r'),
    default=sys.stdin,
    nargs='?'
)

def compile(args):
    ir = lekvar.compile(args.source, jam, llvm, opt_level=args.opt_level)

    if args.out_asm:
        out = ir
        extension = ".ll"
    else:
        out = llvm.compile(ir)
        extension = ""

    if args.output is None:
        if os.path.isfile(args.source.name):
            name = os.path.basename(args.source.name)
            name = os.path.splitext(name)[0] + extension
        else:
            name = "a" + extension
        args.output = open(name, 'wb')

    # Try to ensure the output file is executable
    if os.path.isfile(args.output.name) and not args.out_asm:
        os.chmod(args.output.name, 0o775)

    args.output.write(out)

def run(args):
    if args.source is not None:
        ir = lekvar.compile(args.source, jam, llvm)
        llvm.run_direct(ir)
        return

    class INWrapper:
        def __init__(self):
            self.buffer = ""
            self.position = 0
            self.ln = 1

        def read(self, n = None):
            if n is None: n = len(self.buffer) - self.position

            while self.position + n > len(self.buffer):
                written = input(INTERACTIVE_PROMPT.format(self.ln))
                self.ln += 1
                if not written: return None
                self.buffer += written + "\n"

            out = self.buffer[self.position:self.position + n]
            self.position += n
            return out

        def seek(self, n):
            self.position = n

    print(INTERACTIVE_STARTUP)
    while True:
        try:
            print(INTERACTIVE_PROMPT_RESTART)
            ir = lekvar.compile(INWrapper(), jam, llvm)
            llvm.run_direct(ir)
        except compiler.CompilerError as e:
            print("{}: {}".format(e.__class__.__name__, e))
        except EOFError:
            print("\nExiting...")
            break
        except KeyboardInterrupt:
            print("^C")

        print()

COMMANDS = {
    "r": run,
    "run": run,
    "c": compile,
    "compile": compile,
}

HELP = ["--help", "-h"]

def main(argv):

    # hack for default subparser
    if not any(arg in list(COMMANDS.keys()) + HELP for arg in argv):
        argv.insert(0, "run")

    args = parser.parse_args(argv)

    logging.basicConfig(level=logging.WARNING - args.verbose*10, stream=sys.stdout)

    if args.profile:
        profiler = cProfile.Profile()
        profiler.enable()

    COMMANDS[args.subparser_name](args)

    if args.profile:
        profiler.disable()
        profiler.print_stats(2)

if __name__ == "__main__":
    main(sys.argv[1:])
